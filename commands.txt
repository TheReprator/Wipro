To list all available tasks:
	a) gradlew tasks
	b) .gradlew tasks
	c) ./gradlew tasks
	d) .\gradlew tasks

To generate apk:
    gradlew --stacktrace assembleDebug

To Generate Dependency for all modules:
    .\gradlew allDependencies

To Generate Dependency for all modules in a txt file:
    .\gradlew allDependencies > output.txt


Dokka Command(Document Generation):
	    dokkaGfm - Generates documentation in GitHub flavored markdown format
	    dokkaGfmCollector - Generates documentation merging all subprojects 'dokkaGfm' tasks into one virtual module
	    dokkaGfmMultiModule - Runs all subprojects 'dokkaGfm' tasks and generates module navigation page
	    dokkaGfmPartial - Generates documentation in GitHub flavored markdown format
	    dokkaHtml - Generates documentation in 'html' format
	    dokkaHtmlCollector - Generates documentation merging all subprojects 'dokkaHtml' tasks into one virtual module
	    dokkaHtmlMultiModule - Runs all subprojects 'dokkaHtml' tasks and generates module navigation page
	    dokkaHtmlPartial - Generates documentation in 'html' format
	    dokkaJavadoc - Generates documentation in 'javadoc' format
	    dokkaJavadocCollector - Generates documentation merging all subprojects 'dokkaJavadoc' tasks into one virtual module
	    dokkaJavadocPartial - Generates documentation in 'javadoc' format
	    dokkaJekyll - Generates documentation in Jekyll flavored markdown format
	    dokkaJekyllCollector - Generates documentation merging all subprojects 'dokkaJekyll' tasks into one virtual module
	    dokkaJekyllMultiModule - Runs all subprojects 'dokkaJekyll' tasks and generates module navigation page
	    dokkaJekyllPartial - Generates documentation in Jekyll flavored markdown format
	    javadoc - Generates Javadoc API documentation for the main source code.

    Dokka Run: .\gradlew dokkaHtmlMultiModule


    Reference Dokka:
        1)https://kotlin.github.io/dokka/1.4.0/user_guide/gradle/usage/
        2)https://kotlin.github.io/dokka/1.5.0/user_guide/gradle/usage/


Spotless(Code Formatting and analysis):
    To check: .\gradlew spotlessCheck
    To Apply: .\gradlew spotlessApply


Detekt(Static Code Analysis)

    Detekt Commands:
        detektBaseline - Creates a detekt baseline on the given --baseline path.
        detektBaselineDebug - EXPERIMENTAL: Creates detekt baseline for debug classes with type resolution
        detektBaselineDebugAndroidTest - EXPERIMENTAL: Creates detekt baseline for debugAndroidTest classes with type resolution
        detektBaselineDebugUnitTest - EXPERIMENTAL: Creates detekt baseline for debugUnitTest classes with type resolution
        detektBaselineMain - EXPERIMENTAL: Creates detekt baseline for main classes with type resolution
        detektBaselineRelease - EXPERIMENTAL: Creates detekt baseline for release classes with type resolution
        detektBaselineReleaseUnitTest - EXPERIMENTAL: Creates detekt baseline for releaseUnitTest classes with type resolution
        detektBaselineTest - EXPERIMENTAL: Creates detekt baseline for test classes with type resolution
        detektDebug - EXPERIMENTAL: Run detekt analysis for debug classes with type resolution
        detektDebugAndroidTest - EXPERIMENTAL: Run detekt analysis for debugAndroidTest classes with type resolution
        detektDebugUnitTest - EXPERIMENTAL: Run detekt analysis for debugUnitTest classes with type resolution
        detektGenerateConfig - Generate a detekt configuration file inside your project.
        detektMain - EXPERIMENTAL: Run detekt analysis for main classes with type resolution
        detektRelease - EXPERIMENTAL: Run detekt analysis for release classes with type resolution
        detektReleaseUnitTest - EXPERIMENTAL: Run detekt analysis for releaseUnitTest classes with type resolution
        detektTest - EXPERIMENTAL: Run detekt analysis for test classes with type resolution

    CodeAnalysis:
        .\gradlew detekt
    Generate Default .yml file:
        .\gradlew detektGenerateConfig
